generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String        @id @default(nanoid(16))
  email    String        @unique
  password String
  projects ProjectUser[]
}

model Project {
  id               String             @id @default(nanoid(16))
  name             String
  members          ProjectUser[]
  apiKeys          ApiKey[]
  groups           Group[]
  variables        Variable[]
  ProjectShareLink ProjectShareLink[]
}

model ProjectUser {
  id        String      @id @default(nanoid(16))
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  role      ProjectRole @default(MEMBER)

  @@unique([userId, projectId])
}

model ProjectShareLink {
  id        String   @id @default(nanoid(16))
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(nanoid(16))
  name       String
  key        String    @unique
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String

  @@index([projectId])
}

model Group {
  id        String     @id @default(nanoid(16))
  name      String
  isDefault Boolean    @default(false)
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  variables Variable[]
}

model Variable {
  id        String  @id @default(nanoid(16))
  key       String
  value     String
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([projectId, key])
  @@index([groupId])
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
}
